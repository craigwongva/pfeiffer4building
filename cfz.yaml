#This template is derived from pfeiffer4gettingstarted,
# but it removes the last step which creates a CodePipeline.
#This template creates a CodePipeline.
# In its Staging stage, it uses a CodeDeploy.
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  githubpassword:
    Type: String
  applicationname:
    Type: String
Resources:
  CD4ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CD4ServiceRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codedeploy.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  CD4InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  CD4InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - CD2InstanceRole
      InstanceProfileName: CD5InstanceProfile
  4c:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: vpc-a0383dc5
      GroupDescription: 4c
      SecurityGroupIngress:
      -
        CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      -
        CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: CD5InstanceProfile
      KeyName: oregonkeypair
      SecurityGroupIds:
      - !Ref 4c
      InstanceType: t2.micro
      ImageId: ami-32d8124a
      Tags:
        - Key: Name
          Value: Dev4
  myCodeDeployApp:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Ref applicationname
  myCodeDeploymentGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    DependsOn: myCodeDeployApp
    DependsOn: CD4ServiceRole
    Properties:
      ApplicationName: !Ref applicationname
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: DemoAppInstances
      Ec2TagFilters:
      - Key: Name
        Value: Dev4
        Type: KEY_AND_VALUE
      ServiceRoleArn: "arn:aws:iam::994238729631:role/CD4ServiceRole"
#  fridaypipeline:
#    Type: "AWS::CodePipeline::Pipeline"
#    Properties:
#      ArtifactStore:
#        Type: S3
#        Location: codepipeline-us-west-2-510060297905
#      Name: OklahomaPipeline
#      RestartExecutionOnUpdate: false
#      RoleArn: "arn:aws:iam::994238729631:role/AWS-CodePipeline-Service"
#      Stages:
#        - Name: Source
#          Actions:
#            - Name: Source
#              ActionTypeId:
#                Category: Source
#                Owner: ThirdParty
#                Version: 1
#                Provider: GitHub
#              OutputArtifacts:
#                - Name: MyApp
#              Configuration:
#                Owner: craigwongva
#                Repo: aws-code-deploy-linux
#                PollForSourceChanges: true
#                Branch: master
#                OAuthToken: !Ref githubpassword
#              RunOrder: 1
#        - Name: Staging
#          Actions:
#            - ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Version: 1
#                Provider: CodeDeploy
#              Configuration:
#                ApplicationName: !Ref applicationname
#                DeploymentGroupName: DemoAppInstances
#              InputArtifacts:
#                - Name: MyApp
#              Name: DemoAppInstances
#              RunOrder: 1


# The roleArn was created manually on the Console
#  in the CodePipeline service.

# The artifactStore S3 bucket was an output of a previous
#  manual CodePipeline run. I don't know if it's secure
#  to continue using that bucket.
